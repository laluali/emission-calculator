{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AACA,6BAA6B;AAC7B,qCAA0C;AAC1C,iCAA6B;AAE7B,MAAM,eAAe,GAAG;IACtB,MAAM;IACN,MAAM;IACN,OAAO;IACP,gBAAgB;IAChB,UAAU;IACV,SAAS;IACT,QAAQ;IACR,gBAAgB;IAChB,iBAAiB;IACjB,SAAS;IACT,YAAY;IACZ,iBAAiB;IACjB,eAAe;IACf,WAAW;CACZ,CAAC;AAEF,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;IACxE,IAAI,YAAI,CAAC,MAAM,CAAC,EAAE;QAChB,OAAO,CAAC,MAAM,KAAK,iBAAiB,CAAC;YACnC,CAAC,CAAC,EAAC,eAAe,EAAE,eAAK,CAAC,YAAI,CAAC,MAAM,CAAW,CAAC,EAAC;YAClD,CAAC,CAAC,EAAC,CAAC,MAAM,CAAC,EAAE,YAAI,CAAC,MAAM,CAAC,EAAC,CAAC;KAC9B;AACH,CAAC,CAAC,CAAC,CAAC;AAEJ,kBAAQ,CAAC,aAAa,CAAC,CAAC;AAExB,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACnC,MAAM,OAAO,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAE/C,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,EAAC,cAAc,EAAE,IAAI,CAAC,OAAO,EAAE,EAAC,CAAC,CAAC;AAC9D,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,cAAc,EAAE,KAAK,EAAE,cAAc,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;AAChH,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAEtE,MAAM,eAAe,GAAG;IACtB,YAAY;IACZ,SAAS;IACT,WAAW;IACX,WAAW;IACX,YAAY;IACZ,oBAAoB;IACpB,cAAc;IACd,WAAW;IACX,aAAa;CACd,CAAA;AAED,SAAS,oBAAoB,CAAC,SAAiB;IAC7C,OAAO,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;WAC9D,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AACnC,CAAC;AAED,MAAM,cAAc,GAAG,OAAO,CAAC,IAAI;KAChC,KAAK,CAAC,CAAC,CAAC;KACR,MAAM,CAAC,oBAAoB,CAAC,CAAA;AAE/B,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC","sourcesContent":["#!/usr/bin/env node\nimport * as path from \"path\";\nimport { parse, register } from \"ts-node\";\nimport { argv } from \"yargs\";\n\nconst TS_NODE_OPTIONS = [\n  \"fast\",\n  \"lazy\",\n  \"cache\",\n  \"cacheDirectory\",\n  \"compiler\",\n  \"project\",\n  \"ignore\",\n  \"ignoreWarnings\",\n  \"disableWarnings\",\n  \"getFile\",\n  \"fileExists\",\n  \"compilerOptions\",\n  \"transpileOnly\",\n  \"typeCheck\",\n];\n\nconst tsNodeOptions = Object.assign({}, ...TS_NODE_OPTIONS.map((option) => {\n  if (argv[option]) {\n    return (option === \"compilerOptions\")\n      ? {compilerOptions: parse(argv[option] as string)}\n      : {[option]: argv[option]};\n  }\n}));\n\nregister(tsNodeOptions);\n\nconst Jasmine = require(\"jasmine\");\nconst Command = require(\"jasmine/lib/command\");\n\nconst jasmine = new Jasmine({projectBaseDir: path.resolve()});\nconst examplesDir = path.join(\"node_modules\", \"jasmine-core\", \"lib\", \"jasmine-core\", \"example\", \"node_example\");\nconst command = new Command(path.resolve(), examplesDir, console.log);\n\nconst JASMINE_OPTIONS = [\n  '--no-color',\n  '--color',\n  '--filter=',\n  '--helper=',\n  '--require=',\n  '--stop-on-failure=',\n  '--fail-fast=',\n  '--config=',\n  '--reporter='\n]\n\nfunction jasmineOptionsFilter(argOption: string): boolean {\n  return JASMINE_OPTIONS.some(option => argOption.startsWith(option))\n    || !argOption.startsWith('--');\n}\n\nconst commandOptions = process.argv\n  .slice(2)\n  .filter(jasmineOptionsFilter)\n\ncommand.run(jasmine, commandOptions);\n"]}