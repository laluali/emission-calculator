#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const ts_node_1 = require("ts-node");
const yargs_1 = require("yargs");
const TS_NODE_OPTIONS = [
    "fast",
    "lazy",
    "cache",
    "cacheDirectory",
    "compiler",
    "project",
    "ignore",
    "ignoreWarnings",
    "disableWarnings",
    "getFile",
    "fileExists",
    "compilerOptions",
    "transpileOnly",
    "typeCheck",
];
const tsNodeOptions = Object.assign({}, ...TS_NODE_OPTIONS.map((option) => {
    if (yargs_1.argv[option]) {
        return (option === "compilerOptions")
            ? { compilerOptions: ts_node_1.parse(yargs_1.argv[option]) }
            : { [option]: yargs_1.argv[option] };
    }
}));
ts_node_1.register(tsNodeOptions);
const Jasmine = require("jasmine");
const Command = require("jasmine/lib/command");
const jasmine = new Jasmine({ projectBaseDir: path.resolve() });
const examplesDir = path.join("node_modules", "jasmine-core", "lib", "jasmine-core", "example", "node_example");
const command = new Command(path.resolve(), examplesDir, console.log);
const JASMINE_OPTIONS = [
    '--no-color',
    '--color',
    '--filter=',
    '--helper=',
    '--require=',
    '--stop-on-failure=',
    '--fail-fast=',
    '--config=',
    '--reporter='
];
function jasmineOptionsFilter(argOption) {
    return JASMINE_OPTIONS.some(option => argOption.startsWith(option))
        || !argOption.startsWith('--');
}
const commandOptions = process.argv
    .slice(2)
    .filter(jasmineOptionsFilter);
command.run(jasmine, commandOptions);
//# sourceMappingURL=index.js.map